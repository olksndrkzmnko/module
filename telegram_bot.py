import asyncio
import logging
import time
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from datetime import datetime
from config import TELEGRAM_TOKEN, CHAT_ID, PAIRS, TIMEFRAMES, SWING_TIMEFRAMES, risk_guard, pair_performance, strategy_state, pending_signals, is_trading_running, trading_enabled
from utils import get_historical_data
from telegram_utils import send_telegram_buffered
from machine_learning import train_ml_models_async
from strategy import run_backtest, save_trade_to_csv  # –û–Ω–æ–≤–ª–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    action, signal_id = data.split('_', 1)

    logging.info(f"–û–±—Ä–æ–±–∫–∞ –¥—ñ—ó {action} –¥–ª—è —Å–∏–≥–Ω–∞–ª—É {signal_id}")

    if action == 'scalp' and signal_id in pending_signals and pending_signals[signal_id]['type'] == 'activity':
        pair = pending_signals[signal_id]['pair']
        strategy_state['current_strategy'] = 'scalping'
        strategy_state['active_pair'] = pair
        strategy_state['scalp_end_time'] = time.time() + strategy_state['scalp_timeout']
        await query.message.reply_text(f"‚úÖ –°–∫–∞–ª—å–ø—ñ–Ω–≥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è {pair}")
        logging.info(f"–°–∫–∞–ª—å–ø—ñ–Ω–≥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è {pair}, signal_id={signal_id}")
        del pending_signals[signal_id]
        return

    trade = pending_signals.get(signal_id)
    if not trade:
        await query.message.reply_text(f"–°–∏–≥–Ω–∞–ª {signal_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
        logging.warning(f"–°–∏–≥–Ω–∞–ª {signal_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    pair = trade['pair']
    try:
        if action == 'confirm':
            trade['confirmed'] = True
            trade['order_id'] = f"tracked_{signal_id}"
            risk_guard.active_trades[signal_id] = trade
            logging.info(f"–£–≥–æ–¥—É {signal_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: {trade}")
            await query.message.reply_text(f"‚úÖ –£–≥–æ–¥—É {signal_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Ç–∞ –¥–æ–¥–∞–Ω–æ –¥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è")
            save_trade_to_csv(trade)  # –û–Ω–æ–≤–ª–µ–Ω–æ –≤–∏–∫–ª–∏–∫
            del pending_signals[signal_id]
        elif action == 'reject':
            trade['confirmed'] = False
            logging.info(f"–°–∏–≥–Ω–∞–ª {signal_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
            await query.message.reply_text(f"‚ùå –°–∏–≥–Ω–∞–ª {signal_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
            del pending_signals[signal_id]
        elif action == 'close':
            if signal_id in risk_guard.active_trades:
                current_price = (await get_historical_data(pair, '1m', limit=10))['close'].iloc[-1]
                profit = (current_price - trade['entry_price']) * trade['position_size'] * trade['leverage'] if trade['action'] == 'buy' else (trade['entry_price'] - current_price) * trade['position_size'] * trade['leverage']
                trade['exit_price'] = current_price
                trade['profit'] = profit
                trade['close_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                trade['reason'] = '–†—É—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è'
                save_trade_to_csv(trade)  # –û–Ω–æ–≤–ª–µ–Ω–æ –≤–∏–∫–ª–∏–∫
                risk_guard.current_budget += profit
                risk_guard.available_budget += profit
                risk_guard.total_profit += profit
                pair_performance[pair]['profit'] += profit
                pair_performance[pair]['trades'] += 1
                pair_performance[pair]['win_rate'] = sum(1 for t in risk_guard.trade_history[-20:] if t['profit'] > 0 and t['pair'] == pair) / min(len([t for t in risk_guard.trade_history if t['pair'] == pair]), 20)
                del risk_guard.active_trades[signal_id]
                del pending_signals[signal_id]
                logging.info(f"–£–≥–æ–¥—É {signal_id} –∑–∞–∫—Ä–∏—Ç–æ –≤—Ä—É—á–Ω—É: –ü—Ä–∏–±—É—Ç–æ–∫={profit:.2f}, –í–∏—Ö—ñ–¥–Ω–∞ —Ü—ñ–Ω–∞={current_price:.2f}")
                await query.message.reply_text(f"‚úÖ –£–≥–æ–¥—É {signal_id} –∑–∞–∫—Ä–∏—Ç–æ: –ü—Ä–∏–±—É—Ç–æ–∫=${profit:.2f}")
            else:
                await query.message.reply_text(f"‚ùå –£–≥–æ–¥–∞ {signal_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                logging.warning(f"–£–≥–æ–¥–∞ {signal_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è")
        elif action == 'ignore_close':
            await query.message.reply_text(f"–°–∏–≥–Ω–∞–ª –∑–∞–∫—Ä–∏—Ç—Ç—è {signal_id} –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ")
            logging.info(f"–°–∏–≥–Ω–∞–ª –∑–∞–∫—Ä–∏—Ç—Ç—è {signal_id} –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ")
            del pending_signals[signal_id]
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è {signal_id}: {str(e)}")
        await query.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {signal_id}: {str(e)}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} ({user.username}) –∑–∞–ø—Ä–æ—Å–∏–≤ –¥–æ–≤—ñ–¥–∫—É")
    help_message = (
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
        "/status - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Ç–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n"
        "/stop - –ó—É–ø–∏–Ω–∏—Ç–∏ —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–∏–∫–ª\n"
        "/backtest - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–µ–∫—Ç–µ—Å—Ç –¥–ª—è –≤—Å—ñ—Ö –ø–∞—Ä\n"
        "/retrain - –ü–µ—Ä–µ–Ω–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—ñ\n"
        "/reset - –°–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è RiskGuard —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
    )
    await update.message.reply_text(help_message)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–≤ –∫–æ–º–∞–Ω–¥—É /start")
    try:
        if str(user.id) != str(CHAT_ID):
            await update.message.reply_text("‚õî –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—å–æ–≥–æ –±–æ—Ç–∞")
            logging.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ /start: user_id={user.id}, CHAT_ID={CHAT_ID}")
            return
        global is_trading_running, trading_enabled
        if is_trading_running:
            await update.message.reply_text("üîî –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥.")
            logging.info(f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user.id}")
            return
        trading_enabled = True
        is_trading_running = True
        await update.message.reply_text(
            f"–í—ñ—Ç–∞—é, {user.first_name}! –ë–æ—Ç –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
        )
        logging.info(f"–¢–æ—Ä–≥–æ–≤–∏–π —Ü–∏–∫–ª –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}")
        await send_telegram_buffered(f"üîî –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user.first_name}", force=True)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /start –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {str(e)}")
        await send_telegram_buffered(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /start: {str(e)}", force=True)

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global is_trading_running
    user = update.effective_user
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} ({user.username}) –∑—É–ø–∏–Ω–∏–≤ –±–æ—Ç–∞")
    try:
        is_trading_running = False
        await update.message.reply_text("üõë –¢–æ—Ä–≥–æ–≤–∏–π —Ü–∏–∫–ª –∑—É–ø–∏–Ω–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /stop –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {str(e)}")
        await send_telegram_buffered(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /stop: {str(e)}")

async def backtest_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–µ–∫—Ç–µ—Å—Ç")
    try:
        results = await run_backtest(PAIRS)  # –û–Ω–æ–≤–ª–µ–Ω–æ –≤–∏–∫–ª–∏–∫
        backtest_message = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–µ–∫—Ç–µ—Å—Ç—É:\n" + "\n".join(
            [f"{pair}: –ü—Ä–∏–±—É—Ç–æ–∫=${res['profit']:.2f}, –¢–æ—Ä–≥—ñ–≤={res['trades']}, WinRate={res['win_rate']:.2f}"
             for pair, res in results.items()]
        )
        await update.message.reply_text(backtest_message)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /backtest –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {str(e)}")
        await send_telegram_buffered(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /backtest: {str(e)}")

async def train_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π")
    try:
        await train_ml_models_async(PAIRS, ['5m'], force_retrain=True)  # –ó–º—ñ–Ω–µ–Ω–æ –≤–∏–∫–ª–∏–∫
        await update.message.reply_text("‚úÖ –ú–æ–¥–µ–ª—ñ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–æ")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /train: {str(e)}")
        await send_telegram_buffered(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {str(e)}")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global risk_guard, pair_performance
    user = update.effective_user
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} ({user.username}) —Å–∫–∏–Ω—É–≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    try:
        risk_guard.reset()
        pair_performance = {pair: {'profit': 0, 'trades': 0, 'win_rate': 0} for pair in PAIRS}
        await update.message.reply_text("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /reset –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {str(e)}")
        await send_telegram_buffered(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /reset: {str(e)}")

async def check_data_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} ({user.username}) –∑–∞–ø—Ä–æ—Å–∏–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–∞–Ω–∏—Ö")
    try:
        message = "üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö:\n"
        for pair in PAIRS:
            for timeframe in TIMEFRAMES + SWING_TIMEFRAMES:
                df = await get_historical_data(pair, timeframe, limit=1000 if timeframe in ['1m', '5m'] else 500)
                if df is None or df.empty:
                    message += f"{pair} ({timeframe}): –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö\n"
                else:
                    message += f"{pair} ({timeframe}): {len(df)} —Ä—è–¥–∫—ñ–≤, —Å—Ç–æ–≤–ø—Ü—ñ={df.columns.tolist()}\n"
        await update.message.reply_text(message)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /check_data: {str(e)}")
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /check_data: {str(e)}")

async def swing_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global strategy_state
    user = update.effective_user
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} ({user.username}) –∑–∞–ø—Ä–æ—Å–∏–≤ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É")
    try:
        strategy_state['current_strategy'] = 'swing'
        strategy_state['active_pair'] = None
        strategy_state['scalp_end_time'] = None
        await update.message.reply_text("üîÑ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É –≤–∏–∫–æ–Ω–∞–Ω–æ.")
        logging.info("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É –≤–∏–∫–æ–Ω–∞–Ω–æ")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /swing –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {str(e)}")
        await send_telegram_buffered(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /swing: {str(e)}")