import logging
from config import load_config
from datetime import datetime
from telegram_utils import send_telegram_buffered

logging.basicConfig(filename='risk_management.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', force=True)

CONFIG = load_config()
TRADES_CSV = CONFIG.get('trades_csv', 'trades.csv')

class RiskGuard:
    def __init__(self, initial_budget: float = 1000, max_drawdown: float = 0.08, reserve_ratio: float = 0.25):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è RiskGuard –∑ –∞–≥—Ä–µ—Å–∏–≤–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        self.initial_budget = initial_budget
        self.current_budget = initial_budget
        self.available_budget = initial_budget * (1 - reserve_ratio)
        self.reserve_budget = initial_budget * reserve_ratio
        self.max_drawdown = max_drawdown
        self.active_trades = {}  # {signal_id: trade_info}
        self.trade_history = []
        self.total_profit = 0
        self.daily_loss = 0
        self.consecutive_losses = 0
        self.emergency_stop = False
        self.active = True
        self.max_active_trades = CONFIG.get('max_active_trades', 8)
        self.correlated_pairs = {}
        logging.info("RiskGuard —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    def reset(self) -> None:
        """–°–∫–∏–¥–∞—î —Å—Ç–∞–Ω RiskGuard."""
        self.daily_loss = 0
        self.consecutive_losses = 0
        self.emergency_stop = False
        self.active = True
        self.correlated_pairs = {}
        self.current_budget = self.initial_budget
        self.available_budget = self.initial_budget * (1 - CONFIG.get('reserve_ratio', 0.25))
        logging.info("RiskGuard —Å–∫–∏–Ω—É—Ç–æ")

    async def update_budget(self) -> bool:
        """–û–Ω–æ–≤–ª—é—î –±—é–¥–∂–µ—Ç —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è."""
        try:
            drawdown = (self.initial_budget - self.current_budget) / self.initial_budget
            logging.info(f"–ü–æ—Ç–æ—á–Ω–µ –ø—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è: {drawdown:.2%}")
            if drawdown > 0.05:
                await send_telegram_buffered(f"‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è –¥–æ—Å—è–≥–ª–æ {drawdown:.2%}")
            if drawdown > self.max_drawdown or self.consecutive_losses >= 5:
                self.emergency_stop = True
                logging.warning(f"–ê–≤–∞—Ä—ñ–π–Ω–∞ –∑—É–ø–∏–Ω–∫–∞: –ü—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è {drawdown:.2%} –∞–±–æ {self.consecutive_losses} –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –∑–±–∏—Ç–∫—ñ–≤")
                await send_telegram_buffered(f"üö® –ê–≤–∞—Ä—ñ–π–Ω–∞ –∑—É–ø–∏–Ω–∫–∞: –ü—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è {drawdown:.2%} –∞–±–æ {self.consecutive_losses} –∑–±–∏—Ç–∫—ñ–≤")
                return False
            return True
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É: {str(e)}")
            await send_telegram_buffered(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É: {str(e)}")
            return False

    def calculate_kelly_position(self, signal_prob: float, win_rate: float, avg_win_loss_ratio: float = 2.5, volatility: float = 0.02) -> float:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—î–º –ö–µ–ª–ª—ñ."""
        try:
            kelly_fraction = (signal_prob * (avg_win_loss_ratio + 1) - 1) / avg_win_loss_ratio
            volatility_adjustment = max(0.6, 1.0 - volatility * 4)
            kelly_fraction *= volatility_adjustment
            return max(0.02, min(0.35, kelly_fraction))
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ–∑–∏—Ü—ñ—ó –ö–µ–ª–ª—ñ: {str(e)}")
            return 0.02

    def check_correlated_risk(self, pair: str, correlation_matrix: dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–∏–∑–∏–∫ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –º—ñ–∂ –ø–∞—Ä–∞–º–∏."""
        try:
            correlated = [p for p in self.active_trades.values() if abs(correlation_matrix.get(pair, {}).get(p['pair'], 0)) > 0.6]
            if len(correlated) >= 3:
                logging.info(f"–ü—Ä–æ–ø—É—Å–∫ —É–≥–æ–¥–∏ –¥–ª—è {pair}: –∑–∞–±–∞–≥–∞—Ç–æ –∫–æ—Ä–µ–ª—å–æ–≤–∞–Ω–∏—Ö —É–≥–æ–¥ ({[p['pair'] for p in correlated]})")
                return False
            return True
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–æ–≥–æ —Ä–∏–∑–∏–∫—É –¥–ª—è {pair}: {str(e)}")
            return False

    def validate_signal(self, signal_params: dict) -> bool:
        """–í–∞–ª—ñ–¥—É—î —Ç–æ—Ä–≥–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª."""
        try:
            required_params = ['pair', 'timeframe', 'signal_prob', 'price', 'atr']
            for param in required_params:
                if param not in signal_params:
                    logging.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–∏–≥–Ω–∞–ª—É: {param}")
                    return False
                if param in ['signal_prob', 'price', 'atr'] and (not isinstance(signal_params[param], (int, float)) or signal_params[param] <= 0):
                    logging.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {param}: {signal_params[param]}")
                    return False
            if signal_params['signal_prob'] < CONFIG.get('min_signal_prob', 0.55):
                logging.info(f"–°–∏–≥–Ω–∞–ª –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –¥–ª—è {signal_params['pair']} ({signal_params['timeframe']}): –Ω–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å {signal_params['signal_prob']:.3f}")
                return False
            if len(self.active_trades) >= self.max_active_trades:
                logging.info(f"–°–∏–≥–Ω–∞–ª –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –¥–ª—è {signal_params['pair']} ({signal_params['timeframe']}): –¥–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥ ({self.max_active_trades})")
                return False
            drawdown = (self.initial_budget - self.current_budget) / self.initial_budget
            if drawdown > self.max_drawdown:
                logging.warning(f"–°–∏–≥–Ω–∞–ª –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –¥–ª—è {signal_params['pair']} ({signal_params['timeframe']}): –ø—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è {drawdown:.2%} –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º—É–º {self.max_drawdown}")
                return False
            return True
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É –¥–ª—è {signal_params.get('pair', '–Ω–µ–≤—ñ–¥–æ–º–æ')} ({signal_params.get('timeframe', '–Ω–µ–≤—ñ–¥–æ–º–æ')}): {str(e)}")
            return False

    async def update_trade(self, trade: dict) -> None:
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥—ñ–≤–ª—ñ."""
        try:
            signal_id = trade.get('signal_id')
            if signal_id not in self.active_trades:
                logging.error(f"–¢–æ—Ä–≥—ñ–≤–ª—è {signal_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥–∞—Ö")
                return
            trade_info = self.active_trades[signal_id]
            current_price = trade.get('current_price', trade_info['entry_price'])
            profit = (current_price - trade_info['entry_price']) * trade_info['position_size'] * trade_info['leverage']
            trade_info['profit'] = profit
            trade_info['close_time'] = datetime.now().isoformat()
            if profit < 0:
                self.consecutive_losses += 1
                self.daily_loss += abs(profit)
            else:
                self.consecutive_losses = 0
            self.current_budget += profit
            self.available_budget += profit
            self.total_profit += profit
            self.trade_history.append(trade_info)
            del self.active_trades[signal_id]
            logging.info(f"–¢–æ—Ä–≥—ñ–≤–ª—é {signal_id} –∑–∞–∫—Ä–∏—Ç–æ: –ü—Ä–∏–±—É—Ç–æ–∫={profit:.2f}, –ë—é–¥–∂–µ—Ç={self.current_budget:.2f}")
            await send_telegram_buffered(f"üîí –¢–æ—Ä–≥—ñ–≤–ª—è {signal_id} ({trade_info['pair']}) –∑–∞–∫—Ä–∏—Ç–∞: –ü—Ä–∏–±—É—Ç–æ–∫={profit:.2f}")
            await self.update_budget()
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ {signal_id}: {str(e)}")
            await send_telegram_buffered(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ {signal_id}: {str(e)}")